#include <bits/stdc++.h>
using namespace std;

struct node{
  int u;
  int v;
  int wt;
  node(int u,int v,int wt){
    this->u = u;
    this->v = v;
    this->wt = wt;
  }
};

int find_parent(int node,vector<int> &parent)
{
  if(parent[node] == node){
    return node;
  }
  return parent[node] = find_parent(parent[node],parent);
}

void unions(int u,int v,vector<int> &parent,vector<int> &ranks)
{
  u = find_parent(u,parent);
  v = find_parent(v,parent);

  if(ranks[v] < ranks[u]){
    parent[v] = u; 
  }
  else if(ranks[u] < ranks[v]){
    parent[u] = v;
  }
  else{
    parent[v] = u;
    ranks[u]++;
  }
}

bool comp(node a,node b)
{
  return a.wt < b.wt;
}

int main()
{ 
  int n,m;
  cin>>n>>m;

  vector<node> edges;

  for(int i = 0;i<m;++i){
   int u,v,w;
   cin>>u>>v>>w;
   edges.push_back(node(u,v,w));
  }

  sort(edges.begin(),edges.end(),comp);

  vector<pair<int,pair<int,int>>> ans;

  vector<int> parent(n+1);
  for(int i = 0;i<=n;++i){
    parent[i] = i;
  }
  vector<int> ranks(n+1,0);

  int cost = 0;
  vector<pair<int,int>> mst;

  for(int i = 0;i<edges.size();++i){
        if(find_parent(edges[i].u,parent) != find_parent(edges[i].v,parent)){
          cost+=edges[i].wt;
          mst.push_back({edges[i].u,edges[i].v});
          unions(edges[i].u,edges[i].v,parent,ranks);
        }
  }
 
  for(int i = 0;i<mst.size();++i){
    cout<<"{"<<mst[i].first<<","<<mst[i].second<<"}"<<"\n";
  }
  cout<<cost<<"\n";
  return 0;
}
